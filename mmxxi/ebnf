
PROGRAM = {STMT}

BODY = "{" {STMT} "}" STMT_DELIM
STMT = (ASSIGN | DEFINE | CALL | GUARD | MATCH | LOOP | EXIT) STMT_DELIM
STMT_DELIM = ";"

EXIT = "<~"

LOOP = "loop" IDENT "," IDENT "," IDENT "<-" (IDENT | CALL | LIST | MAP) BODY
LOOP = "loop" [ASSIGN] GUARD_COND [STMT] BODY

MATCH = "match" EXPR "{" STMT_DELIM {CASE} "}"
CASE = (EXPR | GUARD_COND) ":" (STMT | BODY)

GUARD = GUARD_COND (STMT | BODY)
GUARD_COND = "[" EXPR "]"

DEFINE = INF_VAR ":=" FUNC | E_FUNC
DEFINE = INF_VARS ":=" EXPR_LIST

ASSIGN = INF_VAR "<-" FUNC | E_FUNC
ASSIGN = INF_VARS "<-" EXPR_LIST

E_FUNC = "E" "(" VAR_LIST "->" TYPE ")" EXPR
FUNC = "F" "(" VAR_LIST ["->" VAR_LIST] ")" BODY

EXPR_LIST = EXPR {"," EXPR}
VAR_LIST = [EXP_VARS {"," EXP_VARS}]
EXP_VARS = [IDENT {"," IDENT}] TYPE
EXP_VAR = [IDENT] TYPE
INF_VARS = IDENT {"," IDENT} [TYPE]
INF_VAR = IDENT [TYPE]

EXPR = EXPR INFIX_OPERATOR EXPR
EXPR = EXPR "?"
EXPR = ("!" | "-") EXPR
EXPR = "(" EXPR ")"
EXPR = BOOL | NUMBER | STRING | IDENT | CALL | LIST | PAIR | MAP

MAP = "{" [PAIR {"," PAIR}] "}"
PAIR = EXPR ":" EXPR
LIST = "[" [EXPR {"," EXPR}] "]"
CALL = ["@"] IDENT "(" {EXPR} ")"
IDENT = "_" | (LETTER {LETTER | DIGIT | "_"})

STRING = '"' *Any unicode char (needs refining)* '"'
NUMBER = DIGIT {DIGIT} ["." DIGIT {DIGIT}]
BOOL = "true" | "false"

TYPE = "B" | "N" | "S" | "E" | "F"
INFIX_OPERATOR = "==" | "!=" | "<" | ">" | "<=" | ">=" | "+" | "-" | "*" | "/" | "%" | "|" | "&"
LETTER = *Any unicode char from categories 'Lu' or 'Ll' (needs expanding)*
DIGIT = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"


# Empty values

B: false
N: 0
S: ""
F: F()
E: E() Unit

# Considering

// Return statement using `<~` as the early exit symbol
div := F(a, b N -> c N, e S) {
	[b == 0] {
		e = "Can't divide by zero"
		<~
	}
	c <- a/b
}

// Eventually, maybe
div := F(a, b N -> c N, e S) {
	[b == 0] <~ _, "Can't divide by zero"
	<~ a/b, _
}
