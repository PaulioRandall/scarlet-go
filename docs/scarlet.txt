
// Keywords:
// - `F`
// - `IF`,
// - `DO`, `MATCH`, `WATCH`
// - `END`
// - `TRUE`, `FALSE`
// - `GLOBAL`

// Operators:
// - ASSIGNMENT				`:=`
// - EQUALS, NOT EQUALS			`=`, `#`
// - GT, LT, GT_EQ, LT_EQ		`>`, `<`, `>=`, `<=`
// - ADD, SUBTRACT			`+`, `-`
// - MULTIPLY, DIVIDE			`*`, `/`
// - MODULO				`%`
// - NOT				`~`, `¬`
// - AND, OR				`&`, `|`
// - INLINE DO `->`
// - IGNORE  `_`

// Notes:
// - STRING LITERAL	``
// - STRING TEMPALTE	""

GLOBAL divideAndFmt := F(a, b) r, e DO
	WATCH e
		IF b = 0 -> e := `Can't divide by zero`
		r := a / b
		r, e := @FmtReal(r, `.##`)
	END
END

calc := F(argParser) e DO
	WATCH e
		a, b := argParser()
		c, e := divideAndFmt(a, b)
		@Println("{a} / {b} = {c}")
	END
END

parseArgs := F() a, b, e DO
	args := @Args()
	
	WATCH e
		IF @Len(args) < 3 -> e := `Need at least two number arguments`
		a, e := @ToReal(args[1])
		b, e := @ToReal(args[2])
	END
END

@Foreach(@Args(), F(_, v, _) -> @Println(v))
e := calc(parseArgs)
@PanicIf(e)
