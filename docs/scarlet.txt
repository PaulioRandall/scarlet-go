
// Keywords:
// - `FUNC`
// - `IF`, `WATCH`
// - `DO`, `MATCH`, `LOOP`, `END`
// - `TRUE`, `FALSE`

// Operators:
// - ASSIGNMENT				`:=`
// - EQUALS, NOT EQUALS			`=`, `#`
// - GT, LT, GT_EQ, LT_EQ		`>`, `<`, `>=`, `<=`
// - ADD, SUBTRACT			`+`, `-`
// - MULTIPLY, DIVIDE			`*`, `/`
// - MODULO				`%`
// - NOT				`~`, `¬`
// - AND, OR				`&`, `|`
// - LINEFEED ENDED DO BODY `->`
// - TAIL PROCEDURE DEFINITION `^`
// - IGNORE IN `_`

// Notes:
// - STRING LITERAL	``
// - STRING TEMPALTE	""

printArgs := FUNC(x, y) z, e DO
	LOOP arg := @Args() -> @Println(arg)
END

divide := FUNC(a, b) r, e DO
	MATCH
		b = 0 -> e := `Can't divide by zero`
		TRUE  -> r := a / b
	END
END

calc := FUNC(divide) DO

	args := @Args()
	IF @Len(args) # 2 -> @Panic(`Need precisely two number arguments`)

	WATCH e DO
		a, e := @ParseReal(args[1])
		b, e := @ParseReal(args[2])
		r, e := divide(a, b)
		c, e := @FmtReal(r, `*.##`)
	END

	IF e # `` -> @Panic(e)

	@Println("{a} / {b} = {c}")
END

calc(12, 2)
