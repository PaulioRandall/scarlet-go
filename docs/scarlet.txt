
// Keywords:
// - `GLOBAL`
// - `F`
// - `DO`, `MATCH`, `WATCH`
// - `END`
// - `TRUE`, `FALSE`

// Operators:
// - ASSIGNMENT				`:=`
// - EQUALS, NOT EQUALS			`=`, `#`
// - GT, LT, GT_EQ, LT_EQ		`>`, `<`, `>=`, `<=`
// - ADD, SUBTRACT			`+`, `-`
// - MULTIPLY, DIVIDE			`*`, `/`
// - MODULO				`%`
// - NOT				`~`, `¬`
// - AND, OR				`&`, `|`
// - INLINE DO `->`
// - IGNORE  `_`

// Notes:
// - LIST {}
// - PARAMETERS ()
// - STRING LITERAL	``
// - STRING TEMPALTE	""

GLOBAL divideAndFmt := F(a, b -> r, e) DO
	WATCH e
		[b = 0] e := `Can't divide by zero`
		r := a / b
		r, e := @FmtReal(r, `.##`)
	END
END

calc := F(argParser -> e) DO
	WATCH e
		a, b := argParser(@Args())
		c, e := divideAndFmt(a, b)
		@Println("{a} / {b} = {c}")
	END
END

parseArgs := F(args -> a, b, e) DO	
	WATCH e
		[@Len(args) < 3] DO
			e := `Need at least two number arguments`
		END

		a, e := @ToReal(args(1))
		b, e := @ToReal(args(2))
	END
END

printValues := F(_, v, _) @Println(v)
@Foreach(@Args(), printValues)
e := calc(parseArgs)
@PanicIf(e)

list := {
	`abc`,
	3,
}

// Future stuff

$"ls -la"
$"ls -la" IN `./other`
output := $"ls -la"
