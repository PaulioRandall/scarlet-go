
// Keywords:
// - `F`
// - `IF`,
// - `DO`, `MATCH`, `WATCH`
// - `END`
// - `TRUE`, `FALSE`
// - `GLOBAL`

// Operators:
// - ASSIGNMENT				`:=`
// - EQUALS, NOT EQUALS			`=`, `#`
// - GT, LT, GT_EQ, LT_EQ		`>`, `<`, `>=`, `<=`
// - ADD, SUBTRACT			`+`, `-`
// - MULTIPLY, DIVIDE			`*`, `/`
// - MODULO				`%`
// - NOT				`~`, `¬`
// - AND, OR				`&`, `|`
// - INLINE DO `->`
// - IGNORE  `_`

// Notes:
// - STRING LITERAL	``
// - STRING TEMPALTE	""

printArgs := F() DO
	@Foreach(@Args(), F(i, v, _) -> @Println(v))
END

GLOBAL safeDivide := F(a, b) r, e MATCH
	b # 0 -> r := a / b
	TRUE  -> e := `Can't divide by zero`
END

GLOBAL parseAndDivide := F(args) a, b, r, e WATCH e
	a, e := @ToReal(args[1])
	b, e := @ToReal(args[2])
	r, e := safeDivide(a, b)
	c, e := @FmtReal(r, `*.##`)
END

calc := F() e WATCH e
	
	args := @Args()
	IF @Len(args) # 3 -> e := `Need precisely two number arguments`

	a, b, c, e := parseAndDivide(args)
	@Println("{a} / {b} = {c}")
END

printArgs()
@ExpectEmpty(calc())
