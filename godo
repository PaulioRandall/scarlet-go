#!/bin/bash

GO_PROJ_NAME="scarlet"
TEST_TIMEOUT="3s"
OUTPUT_FILE=-o $GO_PROJ_NAME
BUILD_FLAGS=-ldflags "-s -w"

clear

# checkExitCode prints an error message and exits the script if the first
# argument is not 0 (zero).
# $1: exit code to test
# $2: error message if an error detected
checkExitCode() {
  if [[ "$1" != "0" ]]; then
    echo
    echo "Exit code $1: $2"
    exit 1
  fi
}

# goBuild builds the Go program.
goBuild() {
  echo Building...
  rm -f cmd/"$GO_PROJ_NAME"
  cd cmd
  go build $OUTPUT_FILE $BUILD_FLAGS ${GO_PROJ_NAME}.go
  checkExitCode $? "'go build ...' failed"
  cd ..
}

# goCompress compresses the binary executable.
goCompress() {
  echo Compressing...
  cd cmd

	if [ "command -v upx" ]; then
		if [ "$1" == "atomic" ]; then
  		upx --ultra-brute $GO_PROJ_NAME
  	else
  		upx $GO_PROJ_NAME
  	fi

  	checkExitCode $? "'upx ...' failed"
  else
  	echo "Can't compress because you don't have 'upx' installed"
	fi
		
  cd ..
}

# goFmt formats the Go code.
goFmt() {
  echo Formatting...
  go fmt ./...
  checkExitCode $? "'go fmt ...' failed"
}

# goTest runs the Go test code.
goTest() {
  echo Testing...
  go test ./... -timeout "$TEST_TIMEOUT"
  checkExitCode $? "'go test ...' failed"
}

# runBuild runs the built program.
runBuild() {
  echo Running...
  cd cmd
  ./"$GO_PROJ_NAME"
  checkExitCode $? "'./${GO_PROJ_NAME}' failed"
  cd ..
}

# If you just want to build the binary.
if [[ "$1" == "build" ]]; then
  goBuild
  goFmt
  exit 0
fi

# If you want to compress a built binary.
if [[ "$1" == "compress" ]]; then
  goCompress $2
  exit 0
fi

# If you want to build and test the binary.
if [[ "$1" == "test" ]]; then
  goBuild
  goFmt
  goTest
  exit 0
fi

# If you want to build, test, then run the binary.
if [[ "$1" == "run" ]]; then
  goBuild
  goFmt
  goTest
  runBuild
  echo
  exit 0
fi

echo "I don't understand the option or no option supplied '$1'..."
echo "Usage"
echo "	./godo build"
echo "	./godo compress [atomic]"
echo "	./godo test"
echo "	./godo run"
exit 1
