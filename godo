#!/bin/bash

# *********************************
# Change these parameters as needed
EXE_NAME="scarlet"
MAIN_GO_FILE="scarlet/scarlet.go"
TEST_TIMEOUT="3s"
OUTPUT_FILE=-o $EXE_NAME
#BUILD_FLAGS=-ldflags "-s -w"
RESOURCE_FILES="scarlet/test.scarlet"
# *********************************

ROOT_DIR="$PWD"
BUILD_DIR="build"
EXE_FILE="$BUILD_DIR/$EXE_NAME"

clear
mkdir -p "$BUILD_DIR"

# println prints the arguments then a line feed.
# $@: List of text strings to print
println() {
  for s in "$@"
  do
    printf "$s"
  done

  printf "\n"
}

# copyResources copies a space separated list of resource files into the build
# folder.
copyResources() {
	for X in $RESOURCE_FILES
	do
    cp -f -r "$X" "$BUILD_DIR"
	done
}

# checkExitCode prints an error message and exits the script if the first
# argument is not 0 (zero).
# $1: exit code to test
# $2: error message if an error detected
checkExitCode() {
  if [[ "$1" != "0" ]]; then
    println "\n" "Exit code $1: $2"
    exit 1
  fi
}

# goBuild builds the Go program.
goBuild() {
  println "Building..."
 	rm -f "$BUILD_DIR/*"
  go build -o "$EXE_FILE" "$MAIN_GO_FILE"
  checkExitCode $? "'go build ...' failed"
}

# goFmt formats the Go code.
goFmt() {
  println "Formatting..."
  go fmt ./...
  checkExitCode $? "'go fmt ...' failed"
}

# goTest runs the Go test code.
goTest() {
  println "Testing..."
  go test ./... -timeout "$TEST_TIMEOUT"
  checkExitCode $? "'go test ...' failed"
}

# runBuild runs the built program.
runBuild() {
  println "Running..." "\n"
  cd "$BUILD_DIR"
  ./"$EXE_NAME"
  checkExitCode $? "'./$EXE_FILE' failed"
  cd "$ROOT_DIR"
}

# upxCompress compresses the binary executable.
upxCompress() {
  println Compressing...
  cd $BUILD_DIR

	if [ "command -v upx" ]; then
		if [ "$1" == "atomic" ]; then
  		upx --ultra-brute $EXE_NAME
  	else
  		upx $EXE_NAME
  	fi

  	checkExitCode $? "'upx ...' failed"
  else
  	println "Can't compress because you don't have 'upx' installed"
	fi
		
  cd $ROOT_DIR
}

# If you just want to build the binary.
if [[ "$1" == "build" ]]; then
  goBuild
  goFmt
  exit 0
fi

# If you want to build and test the binary.
if [[ "$1" == "test" ]]; then
  goBuild
  goFmt
  goTest
  exit 0
fi

# If you want to build, test, then run the binary.
if [[ "$1" == "run" ]]; then
  goBuild
  goFmt
  goTest
  copyResources
  runBuild
  println
  exit 0
fi

# If you want to compress a built binary.
if [[ "$1" == "compress" ]]; then
  upxCompress $2
  exit 0
fi

println "I don't understand the option or no option supplied '$1'. Usage:"
println "	./godo build            " "Build -> format"
println "	./godo test             " "Build -> format -> test" 
println "	./godo run              " "Build -> format -> test -> run"
println "	./godo compress [atomic]"
exit 1
