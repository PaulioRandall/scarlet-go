#!/bin/bash

GO_PROJ_NAME="scarlet"
TEST_TIMEOUT="3s"

clear
rm -f cmd/"$GO_PROJ_NAME"

# checkExitCode prints an error message and exits the script if the first
# argument is not 0 (zero).
# $1: exit code to test
# $2: error message if an error detected
checkExitCode() {
  if [[ "$1" != "0" ]]; then
    echo
    echo "Exit code $1: $2"
    exit 1
  fi
}

# goBuild builds the Go program.
goBuild() {
  echo Building...
  cd cmd
  go build -o "$GO_PROJ_NAME" "${GO_PROJ_NAME}.go"
  checkExitCode $? "'go build ...' failed"
  cd ..
}

# goFmt formats the Go code.
goFmt() {
  echo Formatting...
  go fmt ./...
  checkExitCode $? "'go fmt ...' failed"
}

# goTest runs the Go test code.
goTest() {
  echo Testing...
  go test ./... -timeout "$TEST_TIMEOUT"
  checkExitCode $? "'go test ...' failed"
}

# runBuild runs the built program.
runBuild() {
  echo Running...
  cd cmd
  ./"$GO_PROJ_NAME"
  checkExitCode $? "'./${GO_PROJ_NAME}' failed"
  cd ..
}

# If wanting to just test the code do this.
if [[ "$1" == "test" ]]; then
  goBuild
  goFmt
  goTest
  exit 0
fi

# Else if wanting to also run the code do this.
if [[ "$1" == "run" ]]; then
  goBuild
  goFmt
  goTest
  runBuild
  exit 0
fi

echo "I don't understand the option or no option supplied '$1'..."
echo "I only deal with 'test' or 'run' commands, take it leave it."
exit 1
