#!/bin/bash

ROOT_DIR="$PWD"
BUILD_DIR="build"

EXE_NAME="scarlet"
EXE_FILE="$BUILD_DIR/$EXE_NAME"
GO_MAIN="scarlet/scarlet.go"

BUILD_FLAGS=""
#BUILD_FLAGS=-gcflags -m -ldflags "-s -w"
RESOURCE_FILES="scarlet/test.scarlet"
TEST_TIMEOUT="2s"

# println prints the arguments then a line feed.
# $@: List of text strings to print
println() {
  for s in "$@"
  do
    printf "$s"
  done

  printf "\n"
}

# copyBuildResources copies a space separated list of resource files into the
# build folder.
copyBuildResources() {
	for X in $RESOURCE_FILES
	do
    cp -f -r "$X" "$BUILD_DIR"
	done
}

# checkExitCode prints an error message and exits the script if the first
# argument is not 0 (zero).
# $1: exit code to test
# $2: error message if an error detected
checkExitCode() {
  if [[ "$1" != "0" ]]; then
    println "\n" "Exit code $1: $2"
    exit 1
  fi
}

# printUsage needs no explanation
printUsage() {
  println "Usage:"
  println "\t" "./godo clean   " "\t" "Delete build directory"
  println "\t" "./godo build   " "\t" "Build -> format"
  println "\t" "./godo test    " "\t" "Build -> format -> test"
  println "\t" "./godo run     " "\t" "Build -> format -> test -> run Scarlet command"
  println "\t" "./godo compress" "\t" "Compress binary if 'upx' is installed"
  println "\t" "./godo help    " "\t" "Show help"
}

# begin prepares the console
begin() {
  tabs -2
  clear
}

# setupBuildDir creates or clears the build directory
setupBuildDir() {
  println "Setting up..."
  
  mkdir -p "$BUILD_DIR"
  checkExitCode $? "Setup failed"

  rm -f "$BUILD_DIR/*"
  checkExitCode $? "Setup failed"
}

# clean needs no explanation
clean() {
  println "Cleaning..."

  rm -r -f "$BUILD_DIR"
  checkExitCode $? "Could not remove build directory"
}

# goBuild builds the Go program.
goBuild() {
  println "Building..."

  go build -o "$EXE_FILE" $BUILD_FLAGS "$GO_MAIN"
  checkExitCode $? "'go build ...' failed"
}

# goFmt formats the Go code.
goFmt() {
  println "Formatting..."

  go fmt ./...
  checkExitCode $? "'go fmt ...' failed"
}

# goTest runs the Go tests.
goTest() {
  println "Testing..."

  go test ./... -timeout "$TEST_TIMEOUT"
  checkExitCode $? "'go test ...' failed"
}

# runExe runs the built executable.
runExe() {
  println "Running..."

  cd $BUILD_DIR
  ./"$EXE_NAME" $@
  checkExitCode $? "'./$EXE_FILE' failed"
  cd $ROOT_DIR
}

# upxCompress compresses the binary executable if possible.
upxCompress() {
  println Compressing...
  cd $BUILD_DIR

	if [ "command -v upx" ]; then
  	upx --ultra-brute $EXE_NAME
  	checkExitCode $? "'upx ...' failed"
  else
  	println "Can't compress because you don't have 'upx' installed"
	fi
		
  cd $ROOT_DIR
}

# If you want to remove the build directories.
if [[ "$1" == "clean" ]]; then
  clean
  println
  exit 0
fi

# If you want to build the project.
if [[ "$1" == "build" ]]; then
  begin
  setupBuildDir
  goBuild
  goFmt
  exit 0
fi

# If you want to build and test the project.
if [[ "$1" == "test" ]]; then
  begin
  setupBuildDir
  goBuild
  goFmt
  goTest
  exit 0
fi

# If you want to run a Scarlet CLI command.
if [[ "$1" == "run" ]]; then
  begin
  setupBuildDir
  goBuild
  goFmt
  goTest
  copyBuildResources
  shift 1
  runExe $@
  println
  exit 0
fi

# If you want to compress a built binary.
if [[ "$1" == "compress" ]]; then
  begin
  upxCompress $2
  exit 0
fi

if [[ "$1" == "help" ]]; then
  printUsage
  exit 0
fi

println "I don't understand the option or no option supplied '$1'. Usage:"
printUsage
exit 1
