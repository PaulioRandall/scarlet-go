package bard

import (
	"fmt"

	"github.com/PaulioRandall/scarlet-go/token"
)

// Bard is an panic catcher and error message printer.
type Bard interface {

	// CatchNightmare catches panics generated by the argument function and
	// prints them according to the specific Bards rules.
	CatchNightmare(func())
}

// Nightmare is an error designed to be embedded with additional information
// that will tie the error message to a location within source code.
type Nightmare struct {
	error
	msg   string
	args  []interface{}
	cause error
}

// NewNightmare creates a Nightmare instance.
func NewNightmare(cause error, msg string, args ...interface{}) Nightmare {
	return Nightmare{
		msg:   msg,
		args:  args,
		cause: cause,
	}
}

// Error satisfies the error interface.
func (e Nightmare) Error() string {
	return fmt.Sprintf(e.msg, e.args...)
}

// Horror is a nightmare were the reference to source code comes from a token.
type Horror struct {
	Nightmare
	tk token.Token
}

// NewHorror creates a horror instance.
func NewHorror(tk token.Token, cause error, msg string, args ...interface{}) Horror {
	return Horror{
		Nightmare: Nightmare{
			msg:   msg,
			args:  args,
			cause: cause,
		},
		tk: tk,
	}
}

// Terror is a nightmare were the reference to source code comes from a line
// number and column index.
type Terror struct {
	Nightmare
	line int
	col  int
}

// NewTerror creates a terror instance.
func NewTerror(line, col int, cause error, msg string, args ...interface{}) Terror {
	return Terror{
		Nightmare: Nightmare{
			msg:   msg,
			args:  args,
			cause: cause,
		},
		line: line,
		col:  col,
	}
}
