
//f := F(a, b -> c, d) DO
	//c := 9
//END

//g := F(a, b -> c, d) c := 12

//EOF

naught_six := 2 * 9 / (3 + 12) * 2 / 4

a_true := 2 * 6 % 8 < 8 / (2 + 1) = FALSE
//       ((2 * 6) % 8) < (8 / (2 + 1)) = FALSE

alpha := {1, (6 * 7 + 2) / 4, `:)`}

a, b := FALSE, FALSE

[1 = (3 - 2)] a := TRUE

[a] DO
	[b] DO
		c := `(:`
	END
END

MATCH
	[FALSE] x := `1st`
	[1 = 2] DO
		x := `2nd`
	END
	[1 < 2] x := `3rd`
	[TRUE ] x := `4th`
END

